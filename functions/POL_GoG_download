#!/bin/bash

local GAME="$1"
# 2.. MD5 hash of the pieces
# Will download as many pieces as extra parameters
# Hashes are recommended for large downloads anyway
shift
local PIECES="$#"

local GOG_REPO="$(POL_Config_Read GOG_REPO)"

if [ -z "$GOG_REPO" ]; then
	POL_SetupWindow_textbox "$(eval_gettext 'In what directory do you want to download GOG files?')" "$TITLE" "$POL_USER_ROOT/tmp/"
	GOG_REPO="$APP_ANSWER"
	POL_Config_Write GOG_REPO "$GOG_REPO"
fi

[ -d "$GOG_REPO" ] || mkdir -p "$GOG_REPO"
cd "$GOG_REPO" || cd "$POL_USER_ROOT/tmp/"
POL_Debug_Message "Will download into $PWD"

local COOKIES="$POL_USER_ROOT/tmp/gog_cookies"
POL_SetupWindow_login "$(eval_gettext 'Please enter your gog.com login to download $GAME')" "$TITLE" "http://www.gog.com/"

POL_SetupWindow_wait "$(eval_gettext 'Please wait...')" "$TITLE"

$POL_WGET https://www.gog.com/en/login --save-cookies="$COOKIES" --post-data="log_email=$POL_LOGIN&log_password=$POL_PASSWORD&redirectOk=/" --no-check-certificate
unset POL_LOGIN POL_PASSWORD

download_piece ()
{
	# 1: URL
	# 2: filename
	# 3: MD5 hash
	# 4: Title

	if [ ! -e "$2" ]; then
		POL_System_wget "$1" "$4" --load-cookies="$COOKIES" -O "$2.part"

		POL_SetupWindow_wait "$(eval_gettext 'Checking piece integrity...')" "$4"
		if [ ! -e "$2.part" -o -n "$3" -a "$(POL_MD5_file '$2.part')" != "$3" ]; then
			rm -f "$2.part"
			POL_Debug_Error "Download seems to have failed"
		else
			mv "$2.part" "$2"
		fi
	fi
}

download_piece "http://www.gog.com/en/download/game/$GAME/0" "setup_$GAME.exe" "$1" "$GAME (1/$PIECES)"

if [ $PIECES -gt 1 ]; then
	local n
	for n in `seq 2 $PIECES`; do
		download_piece "http://www.gog.com/en/download/game/$GAME/$((n-1))" "setup_$GAME-$((n-1)).bin" "${!n}" "$GAME ($n/$PIECES)"
	done
fi

rm -f "$COOKIES"

echo "$PWD/setup_$GAME.exe"
